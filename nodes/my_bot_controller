#!/usr/bin/env python

import rospy
import math
import sys
import tf
from geometry_msgs.msg import Twist, Point
from sensor_msgs.msg import LaserScan
from tf.transformations import euler_from_quaternion
from velocity_publisher import computation

# Initialize your ROS node
rospy.init_node("move_robot")
# Set up a publisher to the /cmd_vel topic
pub = rospy.Publisher("cmd_vel", Twist, queue_size=5)
# Declare a message of type Twist
velocity_msg = Twist()
# publish the velocity at 4 Hz (4 times per second)
rate = rospy.Rate(4)
# set up a tf listener to retrieve transform between the robot and the world
tf_listener = tf.TransformListener()
# parent frame for the listener
parent_frame = 'odom'
# child frame for the listener
child_frame = 'base_footprint'
# gains for the proportional controllers. These values can be tuned.
k_h_gain = 1
k_v_gain = 1

try:
    tf_listener.waitForTransform(parent_frame, child_frame, rospy.Time(), rospy.Duration(1.0))
except (tf.Exception, tf.ConnectivityException, tf.LookupException):
    rospy.loginfo("Cannot find transform between {p} and {c}".format(p=parent_frame, c=child_frame))
    rospy.signal_shutdown("tf Exception")


def get_odom_data():
    """Get the current pose of the robot from the /odom topic

    Return
    ----------
    The position (x, y, z) and the yaw of the robot.

    """
    try:
        (trans, rot) = tf_listener.lookupTransform(parent_frame, child_frame, rospy.Time(0))
        # rotation is a list [r, p, y]
        rotation = euler_from_quaternion(rot)
    except (tf.Exception, tf.ConnectivityException, tf.LookupException):
        rospy.loginfo("TF Exception")
        return
    # return the position (x, y, z) and the yaw
    return Point(*trans), rotation[2]


def get_goal():
    """Get goal arguments from the command line

    The first argument is the x coordinate.
    The second argument is the y coordinate.

    Return
    ----------
    The goal (x, y) to reach.
    """

    x = 0
    y = 0
    if len(sys.argv) == 2:
        coords = int(sys.argv[1])
        if coords == 0:
            x = float(-2)
            y = float(0)
        elif coords == 1:
            x = float(-1)
            y = float(2)
        elif coords == 2:
            x = float(1)
            y = float(2)
        elif coords == 3:
            x = float(2)
            y = float(0)
        elif coords == 4:
            x = float(1)
            y = float(-2)
        elif coords == 5:
            x = float(-1)
            y = float(-2)
        else:
            sys.exit('Location submitted is out of range')
    else:
        sys.exit('Not enough arguments')
    return x, y


last_rotation = [0]


def go_to_goal():
    """Task the robot to reach a goal (x,y) using a proportional controller.

    The current pose of the robot is retrieved from /odom topic.
    Publish the message to /cmd_vel topic.


    """

    # get current pose of the robot from the /odom topic
    (position, rotation) = get_odom_data()
    # get the goal to reach from arguments passed to the command line
    goal_x, goal_y = get_goal()
    rospy.loginfo("x Goal = {0}, y Goal = {1}".format(goal_x, goal_y))
    # compute the distance from the current position to the goal
    distance_to_goal = computation.compute_distance(position.x, position.y, goal_x, goal_y)

    if distance_to_goal > 0.03:
        (position, rotation) = get_odom_data()
        x_start = position.x
        y_start = position.y
        rospy.loginfo("x = {0}, y = {1}".format(x_start, y_start))
        angle_to_goal = math.atan2(goal_y - y_start, goal_x - x_start)

        # the domain of arctan(x) is (-inf, inf)
        # we would like to restrict the domain to (0, 2pi)
        if angle_to_goal < -math.pi/4 or angle_to_goal > math.pi/4:
            if 0 > goal_y > y_start:
                angle_to_goal = -2 * math.pi + angle_to_goal
            elif 0 <= goal_y < y_start:
                angle_to_goal = 2 * math.pi + angle_to_goal
        if last_rotation[-1] > math.pi - 0.1 and rotation <= 0:
            rotation = 2 * math.pi + rotation
        elif last_rotation[-1] < -math.pi + 0.1 and rotation > 0:
            rotation = -2 * math.pi + rotation

        # proportional control for rotating the robot
        velocity_msg.angular.z = k_v_gain * angle_to_goal-rotation

        distance_to_goal = computation.compute_distance(position.x, position.y, goal_x, goal_y)
        # proportional control to move the robot forward
        # We will drive the robot at a maximum speed of 0.5
        rospy.loginfo("Angular velocity: {a}".format(a=velocity_msg.angular.z))
        if -.07 <= velocity_msg.angular.z <= .07:
            velocity_msg.linear.x = min(k_h_gain * distance_to_goal, 0.15)

        # set the z angular velocity for positive and negative rotations
        if velocity_msg.angular.z > 0:
            velocity_msg.angular.z = min(velocity_msg.angular.z, .2)
        else:
            velocity_msg.angular.z = max(velocity_msg.angular.z, -.2)

        # update the new rotation for the next loop
        last_rotation.append(rotation)
        pub.publish(velocity_msg)
        rate.sleep()

    # force the robot to stop by setting linear and angular velocities to 0
    velocity_msg.linear.x = 0.0
    velocity_msg.angular.z = 0.0
    # publish the new message on /cmd_vel topic
    pub.publish(velocity_msg)


def sensor_callback(msg):
    """Callback function to deal with messages on the /scan topic and object avoidance

    The current pose of the robot is retrieved from /odom topic.
    The current laser values are retrieved from the /scan topic.
    The go_to_goal() function is called.
    Publish the message to /cmd_vel topic.

    """
    # Create lists to store positive and negative sensor values
    pos = []
    neg = []
    # Get the 180 sensor values
    for i in reversed(range(0, 91)):
        num = msg.ranges[i]
        if num == float('inf'):
            pos.append(10)
        else:
            pos.append(msg.ranges[i])
    for j in reversed(range(270, 360)):
        num = msg.ranges[j]
        if num == float('inf'):
            neg.append(10)
        else:
            neg.append(msg.ranges[j])
    # Combine the pos and neg lists
    all_ranges = pos + neg

    # todo for the assignment.
    # Call other functions to do obstacle avoidance here
    # Get the odom data
    (position, rotation) = get_odom_data()
    current_x = position.x
    current_y = position.y
    x, y = get_goal()
    # Set the buffer distance
    f = 0.5
    # Check if the goal has been reached
    if (x - .1) < current_x < (x + .1) and (y - .1) < current_y < (y + .1):
        velocity_msg.linear.x = 0.0
        velocity_msg.angular.z = 0.0
        pub.publish(velocity_msg)
        rospy.loginfo('Goal Reached.')
        rospy.signal_shutdown('Goal Reached.')

    # Check if an object has entered the buffer space
    if min(all_ranges) > f:
        rospy.loginfo('Go to Goal')
        go_to_goal()
    else:
        rospy.loginfo('Object Detected')
        # Check if the object is in front of the robot
        if min(all_ranges[65:116]) < f:
            velocity_msg.linear.x = 0.0
            # Check if the object is more to the left or right
            if sum(all_ranges[70:91]) < sum(all_ranges[90:111]):
                rospy.loginfo('Object left')
                # Backup and rotate away from the object
                velocity_msg.linear.x = -0.1
                velocity_msg.angular.z = -0.5
                last_rotation.append(rotation)
            else:
                rospy.loginfo('Object right')
                velocity_msg.linear.x = -0.1
                velocity_msg.angular.z = 0.5
                last_rotation.append(rotation)
        # If no object in front but still detected move forward
        else:
            velocity_msg.linear.x = 0.4
            velocity_msg.angular.z = 0.0

    pub.publish(velocity_msg)


def read_scan():
    """Set up a subscriber for the scan topic

    """
    rospy.Subscriber("scan", LaserScan, sensor_callback)
    rospy.spin()


# Run the following is this file is called from the package bot_controller
# rosrun bot_controller my_bot_controller <arguments>
# Program will close if incorrect number of arguments or wrong second argument is passed
if __name__ == "__main__":
    action = ""
    if len(sys.argv) == 2:
        action = int(sys.argv[1])
    else:
        sys.exit('Not enough arguments passed to the command line')
    if 0 <= action <= 5:
        # Get the odom data
        (position, rotation) = get_odom_data()
        current_x = position.x
        current_y = position.y
        x, y = get_goal()
        # Check if the bot is already at the goal location
        if (x - .1) < current_x < (x + .1) and (y - .1) < current_y < (y + .1):
            sys.exit('Robot already at goal position.')
        # Start scan and continue until shutdown
        while not rospy.is_shutdown():
            read_scan()
    else:
        sys.exit('Unknown argument')
